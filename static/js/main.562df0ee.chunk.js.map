{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Weather.js","Components/Day.js","Components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","icon","description","src","concat","alt","city","country","temperature","humidity","pressure","wind","error","Day","date","temp","Forecast","react","forecast","map","day","key","API_KEY","App","state","undefined","_callee","e","api_call_forecast","data","days","curent_weather","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","list","filter","el","dt_txt","split","length","shift","forEach","obj","weather","main","push","_this","setState","speed","stop","Title","Components_Form","this","Components_Weather","Components_Forecast","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.562df0ee.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1>Weather Finder</h1>\r\n    <p className=\"title-container__subtitle\">\r\n      Find out temperature, condition and more..\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <div>\r\n    <form className=\"input-group\" onSubmit={props.getWeather}>\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        name=\"city\"\r\n        placeholder=\"City...\"\r\n      />\r\n      <input\r\n        className=\"form-control\"\r\n        type=\"text\"\r\n        name=\"country\"\r\n        placeholder=\"Country...\"\r\n      />\r\n      <div className=\"input-group-prepend\">\r\n        <button className=\"btn btn-outline-light\">Get weather</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div className=\"row rounded-lg  mt-5\">\r\n    {props.icon && props.description && (\r\n      <div className=\"col text-center\">\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`}\r\n          alt=\"\"\r\n        />\r\n        <p className=\"weather__key\">\r\n          <span className=\"weather__value\"> {props.description}</span>\r\n        </p>\r\n      </div>\r\n    )}\r\n\r\n    {props.city && props.country && props.temperature && (\r\n      <div className=\"col text-center\">\r\n        <p className=\"weather__city\">\r\n          <span className=\"weather__value\">\r\n            {\" \"}\r\n            {props.city}, {props.country}{\" \"}\r\n          </span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          <span className=\"weather__value\"> {props.temperature}C &deg;</span>\r\n        </p>\r\n      </div>\r\n    )}\r\n\r\n    {props.humidity && props.pressure && props.wind && (\r\n      <div className=\"col\">\r\n        <p className=\"weather__key\">\r\n          Atmospheric Pressure:\r\n          <span className=\"weather__value\"> {props.pressure} pa</span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Humidity:\r\n          <span className=\"weather__value\"> {props.humidity}%</span>\r\n        </p>\r\n        <p className=\"weather__key\">\r\n          Wind:\r\n          <span className=\"weather__value\"> {props.wind} m/s</span>\r\n        </p>\r\n      </div>\r\n    )}\r\n\r\n    {props.error && (\r\n      <div className=\"col text-center\">\r\n        {\" \"}\r\n        <p className=\"weather__error text-center\"> {props.error}</p>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nexport default function Day(props) {\r\n  const { date, icon, temp } = props;\r\n  return (\r\n    <div className=\"col text-center\">\r\n      <p>{date}</p>\r\n      <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n      <p>{temp}C&deg;</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport Day from \"./Day\";\r\n\r\nconst Forecast = props => {\r\n  return (\r\n    <Fragment>\r\n      {props.forecast && (\r\n        <div className=\"row \">\r\n          {props.forecast.map(day => (\r\n            <Day\r\n              key={day.date}\r\n              icon={day.icon}\r\n              temp={day.temp}\r\n              date={day.date}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { Component } from \"react\";\nimport Titles from \"./Components/Title\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\nimport Forecast from \"./Components/Forecast\";\n\n// import axios from 'axios';\n//https://api.openweathermap.org/data/2.5/forecast?q=Gent,Belgium&appid=8e9c3aa645cb00368f351936b2c582c9\nconst API_KEY = \"8e9c3aa645cb00368f351936b2c582c9\";\n\nclass App extends Component {\n  state = {\n    icon: undefined,\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    humidity: undefined,\n    wind: undefined,\n    description: undefined,\n    error: undefined,\n    forecast: null\n  };\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call_forecast = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n\n    //  const data = await api_call_curent.json();\n    const data = await api_call_forecast.json();\n    console.log(data);\n\n    // console.log(forecast);\n    if (city && country) {\n      const days = data.list.filter(\n        el => el.dt_txt.split(\" \")[1] === \"09:00:00\"\n      );\n\n      const curent_weather = days[0];\n      console.log(curent_weather);\n      if (days.length > 5) days.shift();\n\n      let forecast = [];\n      days.forEach(day => {\n        let obj = {\n          date: day.dt_txt,\n          icon: day.weather[0].icon,\n          temp: day.main.temp\n        };\n        forecast.push(obj);\n      });\n\n      this.setState({\n        icon: curent_weather.weather[0].icon,\n        temperature: curent_weather.main.temp,\n        city: data.city.name,\n        country: data.city.country,\n        pressure: curent_weather.main.pressure,\n        humidity: curent_weather.main.humidity,\n        wind: curent_weather.wind.speed,\n        description: curent_weather.weather[0].description,\n        forecast: forecast,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        icon: undefined,\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        humidity: undefined,\n        wind: undefined,\n        description: undefined,\n        forecast: undefined,\n        error: \"Please enter the values\"\n      });\n    }\n    console.log(this.state.forecast);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container w-75 wrapper mt-5 p-5\">\n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <Titles />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <Form getWeather={this.getWeather} />\n            </div>\n          </div>\n\n          <Weather\n            icon={this.state.icon}\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            pressure={this.state.pressure}\n            humidity={this.state.humidity}\n            wind={this.state.wind}\n            description={this.state.description}\n            error={this.state.error}\n          />\n\n          <Forecast forecast={this.state.forecast} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}